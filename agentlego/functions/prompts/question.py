QUESTION_PROMPT = """You are a question generator that creates valuable queries based on extracted information from a tool process. The task is to formulate questions about the image data that meet the following conditions:

1. The answer must be the result returned by the LAST tool call. If the answer is a long sentence, you need to summarize it into a single word or phrase.

2. The question should address a scenario that can occur in real-life situations and meet practical needs.

3. It must be solvable through the tool call, avoiding trivial or overly complex inquiries unrelated to the data.

4. The answer requires analyzing the image or information extracted from the image. The direct content of the image must not appear in the question. Instead, refer to the image as "this," "image," or "picture."

Your response should consist of three parts:

1. **Thought:** Your reasoning for generating the question.
2. **Question:** The question you asked.
3. **Answer:** The answer to the question, either text or a picture generated by the last tool.

Here are some examples to help clarify:

{examples}

Now, I will provide you with the process information. Please create your answer accordingly.

Process: 
{context}
"""


# PROMPT = """You are a smart information processor. Now I will provide you with a tool call process that extracts rich information from a picture. Please ask a valuable question based on this information. Your question should meet the following four requirements:
# 1. The answer to the question must be the information or picture obtained by the LAST tool call.
# 2. The question should preferably meet people's real needs, that is, the scenarios that can be encountered in real life.
# 3. The question must be answered through the tool call process I provide. It should not be too simple to be answered directly, nor should it be irrelevant to the information given.
# 4. The question must be answered by looking at the image, which means that it must be relevant to the information provided by the tool that takes the image as input. At the same time, this information cannot appear directly in your question, but must be replaced by 'image', 'picture' or 'this'.
# Your answer needs to include the following two parts:
# ```
# Question: The question you asked.
# Answer: The answer to the question. Note that this answer can be either text or a picture generated by the tool.
# ```
# Below I will provide you with some examples to help you answer:

# Example 1:
# ```
# {example1}
# ```

# Example 2:
# ```
# {example2}
# ```

# """

# EXAMPLE1 = """Process:
# ImageDescription: 
# Thought: Since we don't know the information in the picture, we first call tool ImageDescription to describe the picture.
# Input: {{'image': image/input.png}}
# Output: The image shows three men standing together, posing for a photo. The man on the left has long hair and is wearing a light blue shirt. The man in the middle, who is smiling, has short dark hair and is wearing a striped sweater. The man on the right has short hair and is wearing a light-colored button-up shirt. All three are facing the camera with relaxed expressions.
# CountGivenObject: 
# Thought: The most prominent entity in the picture is men. We can count how many people there are in the picture.
# Input: {{'image': image/input.png, 'text': men}}
# Output: The number of 'men' in the image is 3.
# GoogleSearch: 
# Thought: If we want to buy a gift for these men that they like, for example, NVIDIA GeForce RTX 4070 SUPER GPU, we need to search for the current price of this GPU.
# Input: {{'query': NVIDIA GeForce RTX 4070 SUPER price January 2023}}
# Output: The search results for 'NVIDIA GeForce RTX 4070 SUPER price January 2023' are as follows:
# 1 - Answer box: The RTX 4070 SUPER arrives with 20% more cores than the RTX 4070, making it faster than an RTX 3090 at a fraction of the power. With DLSS 3, its lead stretches to 1.5x faster. It will be available starting Jan. 17 at $599.

# 2 - GeForce RTX 40 SUPER Series Graphics Cards Launching This ...: The GeForce RTX 4070 SUPER launches January 17th, starting at $599. It boasts 20% more CUDA Cores than the GeForce RTX 4070, and is great for ...

# 3 - Graphics Card Prices Drop Following Nvidia's RTX 4070 ... - Forbes: In fact, ASRock has some super-keen pricing already online with the Phanton Gaming RX 7900 XT sitting at just $709.99 reduced from $799 while ...

# 4 - Review: Nvidia's $600 GeForce RTX 4070 Super is one of its best ...: Judging by the comments on YouTube reviews, you'd think Nvidia's RTX 4070, launched in April 2023 for $599, was a terrible graphics card.

# 5 - NVIDIA GeForce RTX 4070 SUPER marks its first price drop to $589: ZOTAC RTX 4070 SUPER: $589.99 Newegg. ZOTAC has taken the lead in making a price adjustment for their model, becoming the first brand to do so.

# Calculator:
# Thought: Now that we know the price of one NVIDIA GeForce RTX 4070 SUPER, we can calculate the total amount needed to buy one for each of the three people.
# Input: {{'expression': 599 * 3}}
# Output: The result of 599 * 3 is 1797.

# Question: The men in the picture want to buy one NVIDIA GeForce RTX 4070 SUPER each. According to NVIDIA's official website in January 2023, how many dollars will they need to spend in total?
# Answer: 1797"""

# EXAMPLE2 = """Process:
# MathOCR: 
# Thought: The image contains a mathematical expression. We can use MathOCR to extract the expression from the image.
# Input: {{'image': image/input.png}}
# Output: The image shows the expression $(x+4)^{{3}}=27$.
# Plot:
# Thought: The expression in the picture is a mathematical equation. We can plot the equation to visualize it.
# Input: {{'command': \nimport matplotlib.pyplot as plt\nimport numpy as np\ndef solution():\n    x = np.linspace(-10, 2, 400)\n    y = (x + 4)**3\n    figure = plt.figure()\n    plt.plot(x, y, label='(x+4)^3')\n    plt.title('Graph of the function (x+4)^3')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.legend()\n    plt.grid(True)\n    return figure\n}}
# Output: The plot result is saved in path 'image/dummy_generated_image.jpg'.

# Question: Please plot the graph of this function.
# Answer: image/dummy_generated_image.jpg"""

# FINAL_PROMPT = """Now that you have learned the method and format of the reply through examples, I will provide you with the information to be handled, please make your answer.

# Process: 
# {content}
# """

# QUESTION_PROMPT = """You are a question generator that creates valuable queries based on extracted information from a tool process. The task is to formulate questions about the image data that meet the following conditions:

# 1. The answer must be derived from the information or image extracted during the **LAST** tool call.
# 2. The question should address a scenario that can occur in real-life situations and meet practical needs.
# 3. It must be solvable through the tool call, avoiding trivial or overly complex inquiries unrelated to the data.
# 4. The answer requires analyzing the image or information extracted from the image. The direct content of the image must not appear in the question. Instead, refer to the image as "this," "image," or "picture."

# Your response should consist of two parts:
# ```
# Question: The question you asked.
# Answer: The answer to the question, either text or a picture generated by the tool.
# ```

# Here are two examples to help clarify:

# Example 1:
# ```
# Process:
# ImageDescription: 
# Thought: Since we don't know the information in the picture, we first call the tool ImageDescription to describe the picture.
# Input: {{'image': image/input.png}}
# Output: The image shows three men standing together, posing for a photo. The man on the left has long hair and is wearing a light blue shirt. The man in the middle, who is smiling, has short dark hair and is wearing a striped sweater. The man on the right has short hair and is wearing a light-colored button-up shirt. All three are facing the camera with relaxed expressions.
# CountGivenObject: 
# Thought: The most prominent entity in the picture is men. We can count how many people there are in the picture.
# Input: {{'image': image/input.png, 'text': men}}
# Output: The number of 'men' in the image is 3.
# GoogleSearch: 
# Thought: If we want to buy a gift for these men that they like, for example, an NVIDIA GeForce RTX 4070 SUPER GPU, we need to search for the current price of this GPU.
# Input: {{'query': NVIDIA GeForce RTX 4070 SUPER price January 2023}}
# Output: The search results for 'NVIDIA GeForce RTX 4070 SUPER price January 2023' are as follows:
# Answer box: The RTX 4070 SUPER arrives with 20% more cores than the RTX 4070, making it faster than an RTX 3090 at a fraction of the power. It will be available starting Jan. 17 at $599.

# Question: The men in the picture want to buy one NVIDIA GeForce RTX 4070 SUPER each. Based on the price available in January 2023, how much would they need to spend in total?
# Answer: 1797
# ```

# Example 2:
# ```
# Process:
# MathOCR: 
# Thought: The image contains a mathematical expression. We can use MathOCR to extract the equation from the image.
# Input: {{'image': image/input.png}}
# Output: The image shows the expression $(x+4)^3=27$.
# Plot: 
# Thought: The expression in the image can be plotted to help visualize its function.
# Input: {{'command': 
# import matplotlib.pyplot as plt
# import numpy as np
# def solution():
#     x = np.linspace(-10, 2, 400)
#     y = (x + 4)**3
#     figure = plt.figure()
#     plt.plot(x, y, label='(x+4)^3')
#     plt.title('Graph of the function (x+4)^3')
#     plt.xlabel('x')
#     plt.ylabel('y')
#     plt.legend()
#     plt.grid(True)
#     return figure
# }}
# Output: The plot is saved as 'image/dummy_generated_image.jpg'.

# Question: Please visualize the function depicted in the image.
# Answer: image/dummy_generated_image.jpg
# ```

# Now, I will provide you with the process information. Please create your answer accordingly.

# Process: 
# {content}
# """

# RETHINK_PROMPT = """You are a smart information processor. I will give you a problem, an answer, and the reasoning behind it. The goal is to make sure the question requires looking at the picture to answer it. Right now, the question might include details that let someone answer it without using the picture. Your job is to change the question so that it needs the picture for the answer. If the question already makes you look at the picture, no changes are needed.

# Your response should contain two parts:
# 1. **Thought:** Explain your reasoning for how you adjusted the question.
# 2. **Adjusted Question:** Present the revised question. If no adjustment is needed, simply restate the original question.

# Here are some examples to guide you:

# Example 1:
# ```
# {example1}
# ```

# Example 2:
# ```
# {example3}
# ```

# """

# RETHINK_EXAMPLE1 = """Original Question: Can you draw a picture of Winnie the Pooh and Tigger playing together?

# Process:
# ImageDescription: 
# Thought: Since we don't know the information in the picture, we first call the tool ImageDescription to describe the picture.
# Input: {{'image': image/input.png}}
# Output: The image shows the upper part of a brown bear, with its ears visible and fur clearly seen. The background consists of green grass and some patches of dry grass.
# GoogleSearch: 
# Thought: The image focuses on a bear, which often appears as a character in works of art or media. A useful query could be to find cartoons that feature bears as main characters.
# Input: {{'query': Cartoons with bears as main characters}}
# Output: The search results for 'Cartoons with bears as main characters' are as follows:
# 1 - Answer box: Animation Character Origin Teddy Ruxpin The Adventures of Teddy Ruxpin Teri The Amazing World of Gumball The Gummi Bears Disney's Adventures of the Gummi Bears The Hair Bear Bunch! Help!... It's the Hair Bear Bunch!
# TextToImage: 
# Thought: The search results mention "Winnie the Pooh", so we can draw a picture of Winnie the Pooh playing with his best friend Tigger.
# Input: {{'keywords': Winnie the Pooh, Tigger, playing}}
# Output: The generated image is saved in path 'image/dummy_generated_image.jpg'.

# Answer: image/dummy_generated_image.jpg

# Thought: The original question directly mentions the characters Winnie the Pooh and Tigger, which are present in the image. To ensure the model must look at the image, the question should be adjusted to refer to the characters implicitly.
# Adjusted Question: There is a classic cartoon with the animal in the picture as the protagonist. Its best friend is a tiger. Please draw a picture of it playing with its best friend."""

# RETHINK_EXAMPLE2 = """Original Question: What is the value of x in the equation $\\(\\frac{{3}}{{4}}\\left[\\frac{{4}}{{3}}\\left(\\frac{{1}}{{4}} x-1\\right)+4\\right]=\\frac{{1}}{{3}}+\\frac{{2 x}}{{3}}\\)$?

# Process:
# MathOCR: 
# Thought: The image contains a mathematical expression. We can use MathOCR to extract the expression from the image.
# Input: {{'image': image/input.png}}
# Output: The mathematical expression in the image is $\\(\\frac{{3}}{{4}}\\left[\\frac{{4}}{{3}}\\left(\\frac{{1}}{{4}} x-1\\right)+4\\right]=\\frac{{1}}{{3}}+\\frac{{2 x}}{{3}}\\)$.
# Solver: 
# Thought: This equation is simple enough to solve directly using sympy. I will solve it to find the value of $x$.
# Input: {{'command':
# from sympy import symbols, Eq, solve
# def solution():
#     x = symbols('x')
#     equation = Eq(3/4*(4/3*(1/4*x-1)+4), 1/3+2*x/3)
#     solutions = solve(equation, x)
#     return str(solutions)
# }}
# Output: The solution to the equation is [4.00000000000000].

# Thought: The question explicitly mentions the information in the picture, so it needs to be adjusted. The question can be adjusted to ask about 'the value of x in the equation' instead of mentioning the equation directly in the question. This way, the question will implicitly mention the information in the picture, ensuring that the answer requires looking at the image.
# Adjusted Question: What is the value of x in the equation?"""

# RETHINK_EXAMPLE3 = """Original Question: How many visible items in this image are specifically related to coffee?

# Information:
# ImageDescription: 
# Thought: Since we don't know the information in the picture, we first call the tool ImageDescription to describe the picture.
# Input: {{'image': image/input.png}}
# Output: This photo shows a table in a restaurant with a dessert menu prominently displayed in the foreground. The menu features an image of a dessert with ice cream on top. A yellow coffee cup filled with a drink is placed on the table, along with a coffee creamer and a spoon. There are also various items such as salt and pepper shakers, cutlery, and multiple glasses of water. People can be seen reading the menu in the background. The table looks cluttered, indicating a busy dining scene.
# CountGivenObject:
# Thought: The most visible and countable object in the image is the coffee cup, as it is explicitly mentioned in the description.
# Input: {{'image': image/input.png, 'text': coffee cup}}
# Output: The number of 'coffee cup' in the image is 1.
# CountGivenObject:
# Thought: Since the tool has already counted the coffee cups, I will select another visible countable object in the image. The coffee creamer is distinct and also related to coffee, making it a suitable choice.
# Input: {{'image': image/input.png, 'text': coffee creamer}}
# Output: The number of 'coffee creamer' in the image is 2.
# Calculator:
# Thought: Now that we know the number of coffee cup and coffee creamer in the image, we can calculate the total number of visible items related to coffee.
# Input: {{'expression': 1 + 2}}
# Output: The result of 1 + 2 is 3.

# Answer: 3

# Thought: The question implicitly mentions the information in the picture, so no adjustment is needed.
# Question: How many visible items in this image are specifically related to coffee?"""

# RETHINK_FINAL_PROMPT = """Now that you have learned the method and format of the reply through examples, I will provide you with the information to be handled, please make your answer.

# Original Question: {question}

# Information:
# {information}
# """

# RETHINK_QUESTION_PROMPT = RETHINK_PROMPT.format(example1=RETHINK_EXAMPLE1, example3=RETHINK_EXAMPLE3) + RETHINK_FINAL_PROMPT

# if __name__ == '__main__':
#     print(RETHINK_QUESTION_PROMPT)